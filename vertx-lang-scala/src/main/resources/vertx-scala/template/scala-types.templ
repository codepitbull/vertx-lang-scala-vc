@code{

  def isAbstract(className) {
    return java.lang.reflect.Modifier.isAbstract(java.lang.Class.forName(className.toString()).getModifiers());
  }

  def doesTypeRequireConversion(type) {
    return type.kind != CLASS_JSON_OBJECT && type.kind != CLASS_JSON_ARRAY && type.kind != CLASS_ENUM && type.name != 'io.vertx.core.buffer.Buffer';
  }

  def typeNameForBasicScala(type) {
    if (type.name == 'byte' || type.name == 'java.lang.Byte') {
      return  'Byte';
    } else if (type.name == 'short' || type.name == 'java.lang.Short') {
      return  'Short';
    } else if (type.name == 'int' || type.name == 'java.lang.Integer') {
      return  'Int';
    } else if (type.name == 'long' || type.name == 'java.lang.Long') {
      return  'Long';
    } else if (type.name == 'float' || type.name == 'java.lang.Float') {
      return  'Float';
    } else if (type.name == 'double' || type.name == 'java.lang.Double') {
      return  'Double';
    } else if (type.name == 'boolean' || type.name == 'java.lang.Boolean') {
      return  'Boolean';
    } else if (type.name == 'char' || type.name == 'java.lang.Character') {
      return  'Char';
    } else if (type.kind == CLASS_STRING) {
      return  'String';
    }
    return 'ERROR typeNameForBasicScala unkown type (' + type + ')';
  }

  def typeNameForBasicJava(type) {
    if (type.name == 'byte' || type.name == 'java.lang.Byte') {
      return  'java.lang.Byte';
    } else if (type.name == 'short' || type.name == 'java.lang.Short') {
      return  'java.lang.Short';
    } else if (type.name == 'int' || type.name == 'java.lang.Integer') {
      return  'java.lang.Integer';
    } else if (type.name == 'long' || type.name == 'java.lang.Long') {
      return  'java.lang.Long';
    } else if (type.name == 'float' || type.name == 'java.lang.Float') {
      return  'java.lang.Float';
    } else if (type.name == 'double' || type.name == 'java.lang.Double') {
      return  'java.lang.Double';
    } else if (type.name == 'boolean' || type.name == 'java.lang.Boolean') {
      return  'java.lang.Boolean';
    } else if (type.name == 'char' || type.name == 'java.lang.Character') {
      return  'java.lang.Character';
    } else if (type.kind == CLASS_STRING) {
      return  'String';
    }
    return 'ERROR typeNameForBasicJava unkown type (' + type + ')';
  }

  def wrapInOptionIfNullable(nullable, expression) {
    if (nullable) {
      return 'scala.Option[' + expression + ']';
    }
    return expression;
  }

  def fromPropertyInfoToScala(info) {
    if (info.kind.isValue){
      return toScalaMethodParam(info.type);
    } else if (info.kind.isList){
      var ret = 'scala.collection.mutable.Buffer';
      ret += '[' + toScalaMethodParam(info.type) + ']';
      return ret;
    } else if (info.kind.isSet){
      var ret = 'scala.collection.mutable.Set';
      ret += '[' + toScalaMethodParam(info.type) + ']';
      return ret;
    } else if (info.kind.isMap){
      var ret = 'scala.collection.mutable.Map';
      ret += '[String, ' + toScalaMethodParam(info.type) + ']';
      return ret;
    }
    return "ERROR fromPropertyInfoToScala got " + info;
  }

  def assembleTypeParams(typeParams, withTypeParams) {
    if (!typeParams.isEmpty){
      var ret = '';
      for (param:typeParams){
        if (ret != '') {
          ret += ', ';
        }
        ret += param.name;
      }
      return '[' + ret + ']';
    } else {
      return '';
    }
  }

  def escapeIfKeyword(possibleKeyword) {
    if (isKeyword(possibleKeyword)) {
      return '`' + possibleKeyword + '`';
    }
    return possibleKeyword;
  }

  def isKeyword(possibleKeyword) {
    return (possibleKeyword.equals("type") || possibleKeyword.equals("object"));
  }


  def toScalaMethodParam(type) {
    var nullable = type.isNullable;
    if (type.kind == CLASS_VOID || type.name == 'java.lang.Void' || type.name == 'void') {
      return 'Void';
    } else if (type.kind == CLASS_OBJECT) {
      var ret = '';
      if(type.isVariable) {
        ret = type.name;
      }
      else {
        ret = 'AnyRef';
      }
      return wrapInOptionIfNullable(nullable, ret);
    } else if (type.kind == CLASS_THROWABLE) {
      return 'Throwable';
    } else if (type.kind.basic) {
      return wrapInOptionIfNullable(nullable, typeNameForBasicJava(type));
    } else if (type.kind == CLASS_DATA_OBJECT) {
      return wrapInOptionIfNullable(nullable, 'J'+type.simpleName);
    } else if (type.kind == CLASS_LIST){
        var ret = 'List';
        if (!type.args.isEmpty)
          ret += '[' + toScalaMethodParam(type.args[0]) + ']';
        return wrapInOptionIfNullable(nullable, ret);
    } else if (type.kind == CLASS_SET){
        var ret = 'Set';
        if (!type.args.isEmpty)
          ret += '[' + toScalaMethodParam(type.args[0]) + ']';
        return wrapInOptionIfNullable(nullable, ret);
    } else if (type.kind == CLASS_MAP){
        var ret = 'Map';
        if (!type.args.isEmpty())
          ret += '[String, ' + toScalaMethodParam(type.args[1]) + ']';
        return wrapInOptionIfNullable(nullable, ret);
    } else if (type.kind == CLASS_HANDLER) {
      return wrapInOptionIfNullable(nullable, toScalaMethodParam(type.args[0]) + " => Unit");
    } else if (type.kind == CLASS_FUNCTION) {
      var type1 = toScalaMethodParam(type.args[0]);
      var type2 = toScalaMethodParam(type.args[1]);
       var ret = "";
       if (type1.equals("Unit")) {
         ret = "() => "+type2;
       } else {
         ret = type1 + " => " + type2;
       }
       return wrapInOptionIfNullable(nullable, ret);
    } else if (type.kind == CLASS_JSON_OBJECT ||
               type.kind == CLASS_JSON_ARRAY ||
               type.kind == CLASS_ENUM  ||
               type.name == 'io.vertx.core.buffer.Buffer'){
      return wrapInOptionIfNullable(nullable, type.name);
    } else if (type.kind == CLASS_ASYNC_RESULT) {
      var ret = 'AsyncResult';
      if (!type.args.isEmpty)
        ret += '[' + toScalaMethodParam(type.args[0]) + ']';
      else
        ret += '[_]';
      return wrapInOptionIfNullable(nullable, ret);
    } else if (type.kind == CLASS_API) {
      ret = 'J' + helper.getNonGenericType(type.simpleName);
      if(type.isParameterized()) {
        if (type.args.empty) {
          ret += '[_]';
        } else {
          ret += '[';
          var first = true;
          for (arg : type.args) {
            if (first) {
              first = false;
            } else {
              ret += ', ';
            }
            ret += toScalaMethodParam(arg);
          }
          ret += ']';
        }
        return ret;
      }
      return wrapInOptionIfNullable(nullable, ret);
    } else if (type.kind == CLASS_CLASS_TYPE) {
        var ret = 'Class';
        if (type.args.empty) {
          ret += '[_]';
        } else {
          ret += '[';
          var first = true;
          for (arg : type.args) {
            if (first) {
              first = false;
            } else {
              ret += ', ';
            }
            ret += toScalaMethodParam(arg);
          }
          ret += ']';
        }
        return ret;
    } else {
      return 'Unknown type for toScalaMethodParam '+type.name+' '+type.kind;
    }
  }

  def toReturnType(type) {
    var nullable = type.isNullable;
    if (type.kind == CLASS_VOID || type.name == 'java.lang.Void' || type.name == 'void') {
      return 'Unit';
    } else if (type.kind == CLASS_OBJECT) {
      var ret = '';
      if(type.isVariable) {
        ret = type.name;
      }
      else {
        ret = 'AnyRef';
      }
      return wrapInOptionIfNullable(nullable, ret);
    } else if (type.kind == CLASS_THROWABLE) {
      return 'Throwable';
    } else if (type.kind.basic) {
      return wrapInOptionIfNullable(nullable, typeNameForBasicJava(type));
    } else if (type.kind == CLASS_DATA_OBJECT) {
      return wrapInOptionIfNullable(nullable, 'J'+type.simpleName);
    } else if (type.kind == CLASS_LIST){
        var ret = 'List';
        if (!type.args.isEmpty)
          ret += '[' + toReturnType(type.args[0]) + ']';
        return wrapInOptionIfNullable(nullable, ret);
    } else if (type.kind == CLASS_SET){
        var ret = 'Set';
        if (!type.args.isEmpty)
          ret += '[' + toReturnType(type.args[0]) + ']';
        return wrapInOptionIfNullable(nullable, ret);
    } else if (type.kind == CLASS_MAP){
        var ret = 'Map';
        if (!type.args.isEmpty())
          ret += '[String, ' + toReturnType(type.args[1]) + ']';
        return wrapInOptionIfNullable(nullable, ret);
    } else if (type.kind == CLASS_HANDLER) {
      return "Handler[" + toReturnType(type.args[0]) + "]";
    } else if (type.kind == CLASS_FUNCTION) {
      var type1 = toReturnType(type.args[0]);
      var type2 = toReturnType(type.args[1]);
       var ret = "";
       if (type1.equals("Unit")) {
         ret = "() => "+type2;
       } else {
         ret = type1 + " => " + type2;
       }
       return wrapInOptionIfNullable(nullable, ret);
    } else if (type.kind == CLASS_JSON_OBJECT ||
               type.kind == CLASS_JSON_ARRAY ||
               type.kind == CLASS_ENUM  ||
               type.name == 'io.vertx.core.buffer.Buffer'){
      return wrapInOptionIfNullable(nullable, type.name);
    } else if (type.kind == CLASS_ASYNC_RESULT) {
      var ret = 'AsyncResult';
      if (!type.args.isEmpty)
        ret += '[' + toReturnType(type.args[0]) + ']';
      else
        ret += '[_]';
      return wrapInOptionIfNullable(nullable, ret);
    } else if (type.kind == CLASS_API) {
      ret = 'J' + helper.getNonGenericType(type.simpleName);
      if(type.isParameterized()) {
        if (type.args.empty) {
          ret += '[_]';
        } else {
          ret += '[';
          var first = true;
          for (arg : type.args) {
            if (first) {
              first = false;
            } else {
              ret += ', ';
            }
            ret += toReturnType(arg);
          }
          ret += ']';
        }
        return ret;
      }
      return wrapInOptionIfNullable(nullable, ret);
    } else if (type.kind == CLASS_CLASS_TYPE) {
        var ret = 'Class';
        if (type.args.empty) {
          ret += '[_]';
        } else {
          ret += '[';
          var first = true;
          for (arg : type.args) {
            if (first) {
              first = false;
            } else {
              ret += ', ';
            }
            ret += toReturnType(arg);
          }
          ret += ']';
        }
        return ret;
    } else {
      return 'Unknown type for toReturnType '+type.name+' '+type.kind;
    }
  }

  def conversionForJavaMethodParam(name, type) {
    var conversion = '';
    if (type.kind == CLASS_VOID || type.name == 'java.lang.Void' || type.name == 'void') {
      conversion = '';
    } else if (type.kind == CLASS_OBJECT) {
      conversion = '';
    } else if (type.kind == CLASS_THROWABLE) {
      conversion = '';
    } else if (type.kind.basic) {
      conversion = '';
    } else if (type.kind == CLASS_DATA_OBJECT) {
      conversion = '.asJava';
    } else if (type.kind == CLASS_LIST){
      if(type.args[0].kind.basic) {
        if(type.args[0].isNullable) {
          conversion += '.map({case Some(x) => x.asInstanceOf[' + typeNameForBasicJava(type.args[0]) + ']; case None => null})';
        }
        else {
          conversion += '.map(x => x.asInstanceOf[' + typeNameForBasicJava(type.args[0]) + '])';
        }
      }
      else if(type.args[0].isNullable) {
        conversion += '.map(x => x.orNull)';
      }
      conversion += '.asJava';
    } else if (type.kind == CLASS_SET){
      if(type.args[0].kind.basic) {
        if(type.args[0].isNullable) {
          conversion += '.map({case Some(x) => x.asInstanceOf[' + typeNameForBasicJava(type.args[0]) + ']; case None => null})';
        }
        else {
          conversion += '.map(x => x.asInstanceOf[' + typeNameForBasicJava(type.args[0]) + '])';
        }
      }
      else if(type.args[0].isNullable) {
        conversion += '.map(x => x.orNull)';
      }
      conversion += '.asJava';
    } else if (type.kind == CLASS_MAP){
      if(type.args[1].kind.basic) {
        if(type.args[1].isNullable) {
          conversion += '.mapValues({case Some(x) => x.asInstanceOf[' + typeNameForBasicJava(type.args[1]) + ']; case None => null})';
        }
        else {
          conversion += '.mapValues(x => x.asInstanceOf[' + typeNameForBasicJava(type.args[1]) + '])';
        }
      }
      else if(type.args[1].isNullable) {
        conversion += '.mapValues(x => x.orNull)';
      }
      conversion += '.asJava';
    } else if (type.kind == CLASS_HANDLER) {
      if(type.isNullable) {
        conversion = ' match {case Some(t) => (p:' + toScalaMethodParam(type.args[0]) + ') => t(p); case None => null}';
      } else {
        conversion = '(p:' + toScalaMethodParam(type.args[0]) + ') => ' + name + '(p)';
      }
    } else if (type.kind == CLASS_FUNCTION) {
      conversion = '';
    } else if (type.kind == CLASS_JSON_OBJECT ||
               type.kind == CLASS_JSON_ARRAY ||
               type.kind == CLASS_ENUM  ||
               type.name == 'io.vertx.core.buffer.Buffer'){
      conversion = '';
    } else if (type.kind == CLASS_ASYNC_RESULT) {
      conversion = '';
    } else if (type.kind == CLASS_API) {
      conversion = '.asJava';
    } else if (type.kind == CLASS_CLASS_TYPE) {
      conversion = '';
    } else {
      return 'Unknown type for conversionForJavaMethodParam '+type.name+' '+type.kind;
    }

    //TODO thisd is extremely ugly and should be more generic!
    if(type.kind == CLASS_FUNCTION) {
      if(type.args[0].isVariable || (type.args[1].isParameterized && type.args[1].args[0].isVariable)) {
        return 'asJavaFunction(' + name + ')';
      }
      else if(type.isNullable) {
        return name + '.map(x => asJavaFunction(x)).orNull';
      }
      else {
        var invocation = name + '(' + conversionForReturn('a', type.args[0]) + ')';
        return 'a => ' + conversionForJavaMethodParam(invocation, type.args[1]);
      }
    }
    else {
      if(type.kind == CLASS_HANDLER) {
        if(type.isNullable) {
          return escapeIfKeyword(name) + conversion;
        } else {
          return conversion;
        }
      } else if(type.isNullable) {
        if(conversion == '') {
          return escapeIfKeyword(name) + '.orNull';
        }
        else {
          return escapeIfKeyword(name) + '.map(x => x' + conversion + ').orNull';
        }
      }
      else {
        return escapeIfKeyword(name) + conversion;
      }
    }
  }

  def conversionForReturn(invocation, type) {
    var conversion = '';
    if (type.kind == CLASS_VOID || type.name == 'java.lang.Void' || type.name == 'void') {
      conversion = '';
    } else if (type.kind == CLASS_OBJECT) {
      conversion = '';
    } else if (type.kind == CLASS_THROWABLE) {
      conversion = '';
    } else if (type.kind.basic) {
      conversion = '';
    } else if (type.kind == CLASS_DATA_OBJECT) {
      conversion = '';
    } else if (type.kind == CLASS_LIST){
      if(type.args[0].isNullable) {
        conversion = '.asScala.map(x => Option(x)).toList';
      }
      else {
        conversion = '.asScala.toList';
      }
    } else if (type.kind == CLASS_SET){
      if(type.args[0].isNullable) {
        conversion = '.asScala.map(x => Option(x)).toSet';
      }
      else {
        conversion = '.asScala.toSet';
      }
    } else if (type.kind == CLASS_MAP){
      if(type.args[1].isNullable) {
        conversion = '.asScala.mapValues(x => Option(x)).toMap';
      }
      else {
        conversion = '.asScala.toMap';
      }
    } else if (type.kind == CLASS_HANDLER) {
      conversion = '';
    } else if (type.kind == CLASS_FUNCTION) {
      conversion = '';
    } else if (type.kind == CLASS_JSON_OBJECT ||
               type.kind == CLASS_JSON_ARRAY ||
               type.kind == CLASS_ENUM  ||
               type.name == 'io.vertx.core.buffer.Buffer'){
      conversion = '';
    } else if (type.kind == CLASS_ASYNC_RESULT) {
      conversion = '';
    } else if (type.kind == CLASS_API) {
      conversion = '';
    } else if (type.kind == CLASS_CLASS_TYPE) {
      conversion = '';
    } else {
      return 'Unknown type for conversionForReturn '+type.name+' '+type.kind;
    }

    if(type.isNullable) {
      if(conversion == '') {
        return 'scala.Option(' + invocation + ')';
      }
      else {
        return 'scala.Option(' + invocation + ').flatMap(x => Some(x' + conversion + '))';
      }
    }
    else {
      return invocation + conversion;
    }
  }

  def typeOfAsyncResult(type) {
    var nullable = type.isNullable;
    if (type.kind == CLASS_VOID || type.name == 'java.lang.Void' || type.name == 'void') {
      return 'java.lang.Void';
    } else if (type.kind == CLASS_OBJECT) {;
      if(type.isVariable) {
        return type.name;
      }
      else {
        return 'java.lang.Object';
      }
    } else if (type.kind == CLASS_THROWABLE) {
      return 'java.lang.Throwable';
    } else if (type.kind.basic) {
      return typeNameForBasicJava(type);
    } else if (type.kind == CLASS_DATA_OBJECT) {
      return 'J'+type.simpleName;
    } else if (type.kind == CLASS_LIST){
        var ret = 'java.util.List';
        if (!type.args.isEmpty)
          ret += '[' + typeOfAsyncResult(type.args[0]) + ']';
        return wrapInOptionIfNullable(nullable, ret);
    } else if (type.kind == CLASS_SET){
        var ret = 'java.util.Set';
        if (!type.args.isEmpty)
          ret += '[' + typeOfAsyncResult(type.args[0]) + ']';
        return ret;
    } else if (type.kind == CLASS_MAP){
        var ret = 'java.util.Map';
        if (!type.args.isEmpty())
          ret += '[String, ' + typeOfAsyncResult(type.args[1]) + ']';
        return ret;
    } else if (type.kind == CLASS_HANDLER) {
      return "Handler[" + typeOfAsyncResult(type.args[0]) + "]";
    } else if (type.kind == CLASS_FUNCTION) {
      var type1 = typeOfAsyncResult(type.args[0]);
      var type2 = typeOfAsyncResult(type.args[1]);
       var ret = "";
       if (type1.equals("Unit")) {
         ret = "() => "+type2;
       } else {
         ret = type1 + " => " + type2;
       }
       return wrapInOptionIfNullable(nullable, ret);
    } else if (type.kind == CLASS_JSON_OBJECT ||
               type.kind == CLASS_JSON_ARRAY ||
               type.kind == CLASS_ENUM  ||
               type.name == 'io.vertx.core.buffer.Buffer'){
      return type.name;
    } else if (type.kind == CLASS_API) {
      ret = 'J' + helper.getNonGenericType(type.simpleName);
      if(type.isParameterized()) {
        if (type.args.empty) {
          ret += '[_]';
        } else {
          ret += '[';
          var first = true;
          for (arg : type.args) {
            if (first) {
              first = false;
            } else {
              ret += ', ';
            }
            ret += typeOfAsyncResult(arg);
          }
          ret += ']';
        }
        return ret;
      }
      return ret;
    } else if (type.kind == CLASS_CLASS_TYPE) {
        var ret = 'Class';
        if (type.args.empty) {
          ret += '[_]';
        } else {
          ret += '[';
          var first = true;
          for (arg : type.args) {
            if (first) {
              first = false;
            } else {
              ret += ', ';
            }
            ret += typeOfAsyncResult(arg);
          }
          ret += ']';
        }
        return ret;
    } else {
      return 'Unknown type for typeOfAsyncResult '+type.name+' '+type.kind;
    }
  }

}
